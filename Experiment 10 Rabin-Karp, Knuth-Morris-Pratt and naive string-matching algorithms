#include <stdio.h> 

#include <string.h> 

#include <stdlib.h> 

  

#define d 256 // Number of characters in the input alphabet (for Rabin-Karp) 

  

// Function prototypes 

void rabinKarp(char *text, char *pattern, int q); 

void kmp(char *text, char *pattern); 

void naiveSearch(char *text, char *pattern); 

void computeLPSArray(char *pattern, int m, int *lps); 

  

int main() { 

    char text[100], pattern[50]; 

    int q = 101; // A prime number for Rabin-Karp 

  

    printf("Enter the text: "); 

    scanf("%s", text); 

    printf("Enter the pattern: "); 

    scanf("%s", pattern); 

  

    printf("\nNaive String Matching Algorithm:\n"); 

    naiveSearch(text, pattern); 

  

    printf("\nRabin-Karp Algorithm:\n"); 

    rabinKarp(text, pattern, q); 

  

    printf("\nKnuth-Morris-Pratt (KMP) Algorithm:\n"); 

    kmp(text, pattern); 

  

    return 0; 

} 

  

// Naive string matching algorithm 

void naiveSearch(char *text, char *pattern) { 

    int n = strlen(text); 

    int m = strlen(pattern); 

  

    for (int i = 0; i <= n - m; i++) { 

        int j; 

        for (j = 0; j < m; j++) { 

            if (text[i + j] != pattern[j]) { 

                break; 

            } 

        } 

        if (j == m) { 

            printf("Pattern found at index %d\n", i); 

        } 

    } 

} 

  

// Rabin-Karp algorithm 

void rabinKarp(char *text, char *pattern, int q) { 

    int n = strlen(text); 

    int m = strlen(pattern); 

    int p = 0; // Hash value for pattern 

    int t = 0; // Hash value for text 

    int h = 1; 

  

    // The value of h is "pow(d, m-1) % q" 

    for (int i = 0; i < m - 1; i++) { 

        h = (h * d) % q; 

    } 

  

    // Calculate the hash value of pattern and first window of text 

    for (int i = 0; i < m; i++) { 

        p = (d * p + pattern[i]) % q; 

        t = (d * t + text[i]) % q; 

    } 

  

    // Slide the pattern over text one by one 

    for (int i = 0; i <= n - m; i++) { 

        // Check the hash values of current window and pattern 

        if (p == t) { 

            // Check for characters one by one 

            int j; 

            for (j = 0; j < m; j++) { 

                if (text[i + j] != pattern[j]) { 

                    break; 

                } 

            } 

            if (j == m) { 

                printf("Pattern found at index %d\n", i); 

            } 

        } 

  

        // Calculate hash value for next window of text 

        if (i < n - m) { 

            t = (d * (t - text[i] * h) + text[i + m]) % q; 

            if (t < 0) { 

                t += q; 

            } 

        } 

    } 

} 

  

// Knuth-Morris-Pratt (KMP) algorithm 

void kmp(char *text, char *pattern) { 

    int n = strlen(text); 

    int m = strlen(pattern); 

    int lps[m]; 

  

    // Preprocess the pattern to compute LPS array 

    computeLPSArray(pattern, m, lps); 

  

    int i = 0; // Index for text 

    int j = 0; // Index for pattern 

    while (i < n) { 

        if (pattern[j] == text[i]) { 

            i++; 

            j++; 

        } 

        if (j == m) { 

            printf("Pattern found at index %d\n", i - j); 

            j = lps[j - 1]; 

        } else if (i < n && pattern[j] != text[i]) { 

            if (j != 0) { 

                j = lps[j - 1]; 

            } else { 

                i++; 

            } 

        } 

    } 

} 

  

// Function to compute LPS array for KMP 

void computeLPSArray(char *pattern, int m, int *lps) { 

    int length = 0; 

    lps[0] = 0; 

  

    int i = 1; 

    while (i < m) { 

        if (pattern[i] == pattern[length]) { 

            length++; 

            lps[i] = length; 

            i++; 

        } else { 

            if (length != 0) { 

                length = lps[length - 1]; 

            } else { 

                lps[i] = 0; 

                i++; 

            } 

        } 

    } 

} 
