#include <stdio.h> 

#include <stdlib.h> 

#include <time.h> 

  

// Function prototypes 

void mergeSort(int arr[], int left, int right); 

void merge(int arr[], int left, int mid, int right); 

void quickSort(int arr[], int low, int high); 

int partition(int arr[], int low, int high); 

void printArray(int arr[], int size); 

void copyArray(int src[], int dest[], int size); 

  

int main() { 

    int n; 

    printf("Enter the number of elements: "); 

    scanf("%d", &n); 

  

    int *arr = (int *)malloc(n * sizeof(int)); 

    int *copy = (int *)malloc(n * sizeof(int)); 

  

    // Generate random elements 

    srand(time(0)); 

    for (int i = 0; i < n; i++) { 

        arr[i] = rand() % 10000; // Random numbers between 0 and 9999 

    } 

  

    // Copy original array for consistency 

    copyArray(arr, copy, n); 

  

    // Measure time for Merge Sort 

    clock_t start = clock(); 

    mergeSort(arr, 0, n - 1); 

    clock_t end = clock(); 

    double mergeSortTime = (double)(end - start) / CLOCKS_PER_SEC; 

    printf("Merge Sort completed in %.6f seconds.\n", mergeSortTime); 

  

    // Measure time for Quick Sort 

    copyArray(copy, arr, n); // Restore the original array 

    start = clock(); 

    quickSort(arr, 0, n - 1); 

    end = clock(); 

    double quickSortTime = (double)(end - start) / CLOCKS_PER_SEC; 

    printf("Quick Sort completed in %.6f seconds.\n", quickSortTime); 

  

    // Cleanup 

    free(arr); 

    free(copy); 

  

    return 0; 

} 

  

// Merge Sort functions 

void mergeSort(int arr[], int left, int right) { 

    if (left < right) { 

        int mid = left + (right - left) / 2; 

        mergeSort(arr, left, mid); 

        mergeSort(arr, mid + 1, right); 

        merge(arr, left, mid, right); 

    } 

} 

  

void merge(int arr[], int left, int mid, int right) { 

    int n1 = mid - left + 1; 

    int n2 = right - mid; 

  

    int *L = (int *)malloc(n1 * sizeof(int)); 

    int *R = (int *)malloc(n2 * sizeof(int)); 

  

    for (int i = 0; i < n1; i++) 

        L[i] = arr[left + i]; 

    for (int i = 0; i < n2; i++) 

        R[i] = arr[mid + 1 + i]; 

  

    int i = 0, j = 0, k = left; 

    while (i < n1 && j < n2) { 

        if (L[i] <= R[j]) 

            arr[k++] = L[i++]; 

        else 

            arr[k++] = R[j++]; 

    } 

  

    while (i < n1) 

        arr[k++] = L[i++]; 

    while (j < n2) 

        arr[k++] = R[j++]; 

  

    free(L); 

    free(R); 

} 

  

// Quick Sort functions 

void quickSort(int arr[], int low, int high) { 

    if (low < high) { 

        int pi = partition(arr, low, high); 

        quickSort(arr, low, pi - 1); 

        quickSort(arr, pi + 1, high); 

    } 

} 

  

int partition(int arr[], int low, int high) { 

    int pivot = arr[high]; 

    int i = low - 1; 

  

    for (int j = low; j < high; j++) { 

        if (arr[j] < pivot) { 

            i++; 

            int temp = arr[i]; 

            arr[i] = arr[j]; 

            arr[j] = temp; 

        } 

    } 

  

    int temp = arr[i + 1]; 

    arr[i + 1] = arr[high]; 

    arr[high] = temp; 

  

    return i + 1; 

} 

  

// Utility functions 

void printArray(int arr[], int size) { 

    for (int i = 0; i < size; i++) { 

        printf("%d ", arr[i]); 

    } 

    printf("\n"); 

} 

  

void copyArray(int src[], int dest[], int size) { 

    for (int i = 0; i < size; i++) { 

        dest[i] = src[i]; 

    } 

} 
