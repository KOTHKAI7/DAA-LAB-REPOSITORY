#include <stdio.h> 

#include <stdlib.h> 

  

// Structure to store item details 

typedef struct { 

    int weight; 

    int value; 

    double ratio; // value-to-weight ratio (for greedy approach) 

} Item; 

  

// Function prototypes 

int knapsackGreedy(int W, Item items[], int n); 

int knapsackDP(int W, Item items[], int n); 

void sortItemsByRatio(Item items[], int n); 

void printItems(Item items[], int n); 

  

int main() { 

    int n, W; 

  

    printf("Enter the number of items: "); 

    scanf("%d", &n); 

  

    Item items[n]; 

    printf("Enter the weight and value of each item:\n"); 

    for (int i = 0; i < n; i++) { 

        printf("Item %d: ", i + 1); 

        scanf("%d %d", &items[i].weight, &items[i].value); 

        items[i].ratio = (double)items[i].value / items[i].weight; 

    } 

  

    printf("Enter the maximum weight of the knapsack: "); 

    scanf("%d", &W); 

  

    printf("\nItems:\n"); 

    printItems(items, n); 

  

    printf("\nUsing Greedy Approach (based on value-to-weight ratio):\n"); 

    int maxGreedy = knapsackGreedy(W, items, n); 

    printf("Maximum value (Greedy): %d\n", maxGreedy); 

  

    printf("\nUsing Dynamic Programming Approach:\n"); 

    int maxDP = knapsackDP(W, items, n); 

    printf("Maximum value (Dynamic Programming): %d\n", maxDP); 

  

    return 0; 

} 

  

// Greedy approach (fractional knapsack style but 0/1 selection) 

int knapsackGreedy(int W, Item items[], int n) { 

    sortItemsByRatio(items, n); 

  

    int weight = 0, value = 0; 

    for (int i = 0; i < n; i++) { 

        if (weight + items[i].weight <= W) { 

            weight += items[i].weight; 

            value += items[i].value; 

        } 

    } 

    return value; 

} 

  

// Dynamic programming approach 

int knapsackDP(int W, Item items[], int n) { 

    int dp[n + 1][W + 1]; 

  

    // Initialize the DP table 

    for (int i = 0; i <= n; i++) { 

        for (int w = 0; w <= W; w++) { 

            if (i == 0 || w == 0) { 

                dp[i][w] = 0; 

            } else if (items[i - 1].weight <= w) { 

                dp[i][w] = (items[i - 1].value + 

                            dp[i - 1][w - items[i - 1].weight]) > 

                           dp[i - 1][w] 

                               ? (items[i - 1].value + dp[i - 1][w - items[i - 1].weight]) 

                               : dp[i - 1][w]; 

            } else { 

                dp[i][w] = dp[i - 1][w]; 

            } 

        } 

    } 

  

    return dp[n][W]; 

} 

  

// Function to sort items by value-to-weight ratio in descending order 

void sortItemsByRatio(Item items[], int n) { 

    for (int i = 0; i < n - 1; i++) { 

        for (int j = 0; j < n - i - 1; j++) { 

            if (items[j].ratio < items[j + 1].ratio) { 

                Item temp = items[j]; 

                items[j] = items[j + 1]; 

                items[j + 1] = temp; 

            } 

        } 

    } 

} 

  

// Function to print items 

void printItems(Item items[], int n) { 

    printf("Weight\tValue\tValue/Weight Ratio\n"); 

    for (int i = 0; i < n; i++) { 

        printf("%d\t%d\t%.2f\n", items[i].weight, items[i].value, items[i].ratio); 

    } 

} 
