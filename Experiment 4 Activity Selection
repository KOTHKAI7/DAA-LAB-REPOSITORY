#include <stdio.h>

void sortActivities(int start[], int finish[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (finish[j] > finish[j + 1]) {
                // Swap finish times
                int temp = finish[j];
                finish[j] = finish[j + 1];
                finish[j + 1] = temp;

                // Swap start times to maintain consistency
                temp = start[j];
                start[j] = start[j + 1];
                start[j + 1] = temp;
            }
        }
    }
}

// Function to perform activity selection using the greedy approach
void activitySelection(int start[], int finish[], int n) {
    // Sort activities based on their finish times
    sortActivities(start, finish, n);

    printf("Selected activities are:\n");

    // The first activity always gets selected
    int i = 0;
    printf("Activity %d (start: %d, finish: %d)\n", i, start[i], finish[i]);

    // Consider the rest of the activities
    for (int j = 1; j < n; j++) {
        // If this activity has a start time greater than or equal to
        // the finish time of the previously selected activity, select it
        if (start[j] >= finish[i]) {
            printf("Activity %d (start: %d, finish: %d)\n", j, start[j], finish[j]);
            i = j;  // Update the last selected activity
        }
    }
}

int main() {
    // Example activity start and finish times
    int start[] = {1, 3, 0, 5, 8, 5};
    int finish[] = {2, 4, 6, 7, 9, 9};
    int n = sizeof(start) / sizeof(start[0]);

    activitySelection(start, finish, n);

    return 0;
}
