#include <stdio.h> 

#include <stdlib.h> 

  

// Function prototypes 

void traditionalMultiply(int n, int A[n][n], int B[n][n], int C[n][n]); 

void strassenMultiply(int n, int A[n][n], int B[n][n], int C[n][n]); 

void addMatrix(int n, int A[n][n], int B[n][n], int C[n][n]); 

void subtractMatrix(int n, int A[n][n], int B[n][n], int C[n][n]); 

void printMatrix(int n, int mat[n][n]); 

  

// Traditional matrix multiplication 

void traditionalMultiply(int n, int A[n][n], int B[n][n], int C[n][n]) { 

    for (int i = 0; i < n; i++) { 

        for (int j = 0; j < n; j++) { 

            C[i][j] = 0; 

            for (int k = 0; k < n; k++) { 

                C[i][j] += A[i][k] * B[k][j]; 

            } 

        } 

    } 

} 

  

// Strassen's matrix multiplication 

void strassenMultiply(int n, int A[n][n], int B[n][n], int C[n][n]) { 

    if (n == 1) { 

        C[0][0] = A[0][0] * B[0][0]; 

        return; 

    } 

  

    int newSize = n / 2; 

    int i, j; 

  

    // Allocate memory for submatrices 

    int A11[newSize][newSize], A12[newSize][newSize], A21[newSize][newSize], A22[newSize][newSize]; 

    int B11[newSize][newSize], B12[newSize][newSize], B21[newSize][newSize], B22[newSize][newSize]; 

    int C11[newSize][newSize], C12[newSize][newSize], C21[newSize][newSize], C22[newSize][newSize]; 

    int M1[newSize][newSize], M2[newSize][newSize], M3[newSize][newSize], M4[newSize][newSize]; 

    int M5[newSize][newSize], M6[newSize][newSize], M7[newSize][newSize]; 

    int temp1[newSize][newSize], temp2[newSize][newSize]; 

  

    // Divide matrices into submatrices 

    for (i = 0; i < newSize; i++) { 

        for (j = 0; j < newSize; j++) { 

            A11[i][j] = A[i][j]; 

            A12[i][j] = A[i][j + newSize]; 

            A21[i][j] = A[i + newSize][j]; 

            A22[i][j] = A[i + newSize][j + newSize]; 

  

            B11[i][j] = B[i][j]; 

            B12[i][j] = B[i][j + newSize]; 

            B21[i][j] = B[i + newSize][j]; 

            B22[i][j] = B[i + newSize][j + newSize]; 

        } 

    } 

  

    // Calculate M matrices 

    addMatrix(newSize, A11, A22, temp1); 

    addMatrix(newSize, B11, B22, temp2); 

    strassenMultiply(newSize, temp1, temp2, M1); 

  

    addMatrix(newSize, A21, A22, temp1); 

    strassenMultiply(newSize, temp1, B11, M2); 

  

    subtractMatrix(newSize, B12, B22, temp2); 

    strassenMultiply(newSize, A11, temp2, M3); 

  

    subtractMatrix(newSize, B21, B11, temp2); 

    strassenMultiply(newSize, A22, temp2, M4); 

  

    addMatrix(newSize, A11, A12, temp1); 

    strassenMultiply(newSize, temp1, B22, M5); 

  

    subtractMatrix(newSize, A21, A11, temp1); 

    addMatrix(newSize, B11, B12, temp2); 

    strassenMultiply(newSize, temp1, temp2, M6); 

  

    subtractMatrix(newSize, A12, A22, temp1); 

    addMatrix(newSize, B21, B22, temp2); 

    strassenMultiply(newSize, temp1, temp2, M7); 

  

    // Combine results into C matrix 

    addMatrix(newSize, M1, M4, temp1); 

    subtractMatrix(newSize, temp1, M5, temp2); 

    addMatrix(newSize, temp2, M7, C11); 

  

    addMatrix(newSize, M3, M5, C12); 

  

    addMatrix(newSize, M2, M4, C21); 

  

    addMatrix(newSize, M1, M3, temp1); 

    subtractMatrix(newSize, temp1, M2, temp2); 

    addMatrix(newSize, temp2, M6, C22); 

  

    // Combine submatrices into the result 

    for (i = 0; i < newSize; i++) { 

        for (j = 0; j < newSize; j++) { 

            C[i][j] = C11[i][j]; 

            C[i][j + newSize] = C12[i][j]; 

            C[i + newSize][j] = C21[i][j]; 

            C[i + newSize][j + newSize] = C22[i][j]; 

        } 

    } 

} 

  

// Matrix addition 

void addMatrix(int n, int A[n][n], int B[n][n], int C[n][n]) { 

    for (int i = 0; i < n; i++) { 

        for (int j = 0; j < n; j++) { 

            C[i][j] = A[i][j] + B[i][j]; 

        } 

    } 

} 

  

// Matrix subtraction 

void subtractMatrix(int n, int A[n][n], int B[n][n], int C[n][n]) { 

    for (int i = 0; i < n; i++) { 

        for (int j = 0; j < n; j++) { 

            C[i][j] = A[i][j] - B[i][j]; 

        } 

    } 

} 

  

// Print matrix 

void printMatrix(int n, int mat[n][n]) { 

    for (int i = 0; i < n; i++) { 

        for (int j = 0; j < n; j++) { 

            printf("%d ", mat[i][j]); 

        } 

        printf("\n"); 

    } 

} 

  

// Main function 

int main() { 

    int n; 

    printf("Enter the size of the matrix (power of 2): "); 

    scanf("%d", &n); 

  

    int A[n][n], B[n][n], C[n][n]; 

  

    printf("Enter elements of matrix A:\n"); 

    for (int i = 0; i < n; i++) { 

        for (int j = 0; j < n; j++) { 

            scanf("%d", &A[i][j]); 

        } 

    } 

  

    printf("Enter elements of matrix B:\n"); 

    for (int i = 0; i < n; i++) { 

        for (int j = 0; j < n; j++) { 

            scanf("%d", &B[i][j]); 

        } 

    } 

  

    printf("Result using Traditional Multiplication:\n"); 

    traditionalMultiply(n, A, B, C); 

    printMatrix(n, C); 

  

    printf("Result using Strassen's Multiplication:\n"); 

    strassenMultiply(n, A, B, C); 

    printMatrix(n, C); 

  

    return 0; 

} 
