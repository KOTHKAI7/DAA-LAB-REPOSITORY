#include <stdio.h> 

#include <stdlib.h> 

  

// Structure to store item details 

typedef struct { 

    int weight; 

    int value; 

} Item; 

  

// Node for Branch & Bound 

typedef struct { 

    int level; 

    int profit; 

    int weight; 

    float bound; 

} Node; 

  

// Function prototypes 

void knapsackBacktracking(int i, int profit, int weight, int capacity, int n, Item items[], int *maxProfit); 

float calculateBound(Node u, int n, int capacity, Item items[]); 

int knapsackBranchAndBound(int n, int capacity, Item items[]); 

int compare(const void *a, const void *b); 

  

int main() { 

    int n, capacity; 

  

    printf("Enter the number of items: "); 

    scanf("%d", &n); 

  

    Item items[n]; 

    printf("Enter the weight and value of each item:\n"); 

    for (int i = 0; i < n; i++) { 

        printf("Item %d: ", i + 1); 

        scanf("%d %d", &items[i].weight, &items[i].value); 

    } 

  

    printf("Enter the capacity of the knapsack: "); 

    scanf("%d", &capacity); 

  

    // Sort items by value-to-weight ratio (for Branch & Bound) 

    qsort(items, n, sizeof(Item), compare); 

  

    // Backtracking 

    int maxProfitBacktracking = 0; 

    knapsackBacktracking(0, 0, 0, capacity, n, items, &maxProfitBacktracking); 

    printf("\nMaximum profit using Backtracking: %d\n", maxProfitBacktracking); 

  

    // Branch & Bound 

    int maxProfitBranchAndBound = knapsackBranchAndBound(n, capacity, items); 

    printf("Maximum profit using Branch & Bound: %d\n", maxProfitBranchAndBound); 

  

    return 0; 

} 

  

// Backtracking function 

void knapsackBacktracking(int i, int profit, int weight, int capacity, int n, Item items[], int *maxProfit) { 

    if (weight > capacity) { 

        return; 

    } 

    if (profit > *maxProfit) { 

        *maxProfit = profit; 

    } 

    if (i < n) { 

        // Include the current item 

        knapsackBacktracking(i + 1, profit + items[i].value, weight + items[i].weight, capacity, n, items, maxProfit); 

        // Exclude the current item 

        knapsackBacktracking(i + 1, profit, weight, capacity, n, items, maxProfit); 

    } 

} 

  

// Comparator for sorting items by value-to-weight ratio 

int compare(const void *a, const void *b) { 

    Item *item1 = (Item *)a; 

    Item *item2 = (Item *)b; 

    double r1 = (double)item1->value / item1->weight; 

    double r2 = (double)item2->value / item2->weight; 

    return r2 - r1 > 0 ? 1 : -1; 

} 

  

// Function to calculate the upper bound for Branch & Bound 

float calculateBound(Node u, int n, int capacity, Item items[]) { 

    if (u.weight >= capacity) { 

        return 0; 

    } 

    float bound = u.profit; 

    int j = u.level + 1; 

    int totalWeight = u.weight; 

  

    // Include items until the knapsack is full 

    while (j < n && totalWeight + items[j].weight <= capacity) { 

        totalWeight += items[j].weight; 

        bound += items[j].value; 

        j++; 

    } 

    if (j < n) { 

        bound += (capacity - totalWeight) * ((float)items[j].value / items[j].weight); 

    } 

  

    return bound; 

} 

  

// Branch & Bound function 

int knapsackBranchAndBound(int n, int capacity, Item items[]) { 

    Node u, v; 

    int maxProfit = 0; 

  

    // Priority queue (simple array-based queue) 

    Node queue[1000]; 

    int front = 0, rear = 0; 

  

    u.level = -1; 

    u.profit = 0; 

    u.weight = 0; 

    u.bound = calculateBound(u, n, capacity, items); 

    queue[rear++] = u; 

  

    while (front < rear) { 

        u = queue[front++]; 

        if (u.level == n - 1) { 

            continue; 

        } 

  

        v.level = u.level + 1; 

        v.weight = u.weight + items[v.level].weight; 

        v.profit = u.profit + items[v.level].value; 

  

        if (v.weight <= capacity && v.profit > maxProfit) { 

            maxProfit = v.profit; 

        } 

        v.bound = calculateBound(v, n, capacity, items); 

        if (v.bound > maxProfit) { 

            queue[rear++] = v; 

        } 

  

        v.weight = u.weight; 

        v.profit = u.profit; 

        v.bound = calculateBound(v, n, capacity, items); 

        if (v.bound > maxProfit) { 

            queue[rear++] = v; 

        } 

    } 

  

    return maxProfit; 

} 
